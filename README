Copyright 2010 Pat M. Lasswell GPLv3

Contents
  1. Differences From R5RS
    1.1 Features Not Supported
    1.2 Extensions
      1.2.1 Dotted Symbols
      1.2.2 Javascript/Scheme Interleaving
      1.2.3 Syntax Reflection
      1.2.4 String Handling

  2. Usage
    2.1 Requirements
    2.2 Client
    2.3 Server

  3. Components
    3.1 Moosky
    3.2 Moosky.Cons
    3.3 Moosky.read
    3.4 Moosky.compile
    3.5 Moosky.Top
    3.6 Moosky.TokenClasses 

  4. Implementation
    4.1 Frames and Scope
    4.2 Internal Representation
    4.3 Object Code
    4.4 Relationship With Javascript

  5. TODO


1. Differences From R5RS


1.1 Features Not Supported

Continuations
Ports
Numeric Tower


1.2 Extensions


1.2.1 Dotted Symbols

In R5RS foo.bar is an acceptible symbol with no special handling.  In
Moosky, to allow easy access to Javascript objects, symbols with a '.'
in them are assumed to refer to objects in the Javascript namespace.
Hence 'Hello, World!' can be as simple as

(window.alert "Hello, World!")


1.2.2 Javascript/Scheme Interleaving

Javascript can be inserted directly into Scheme code by quoting with
braces.  Both simple inline quotes and extended multiline quotes are
supported.  Furthermore, Scheme can be inserted into these blocks
using the backquote.

Single line Javscript starts with an open brace in the second or
subsequent column.  

(define foo { new Foo() })

Nested braces are not allowed.  Thus

(map { function(a) { return a.split(','); } } args)

won't fly, but

(map #{ function(a) { return a.split(','); } }# args)

is just fine.

To interpolate bits of Scheme into Javascript, use @:

(map #{ function(a) { return @(car a).split(','); } }# args)

or 

(define foo { new Foo(@car) })


1.2.3 Syntax Reflection

R5RS specifices a hygienic macro system using define-syntax,
syntax-rules, let-syntax, and letrec-syntax.  It is very powerful, and
relatively easy to use, but at the cost of being a rather large chunk
of software.  The old define-macro system, while having some rather
nasty sharp edges, is lightweight, genuinely simple, and compact.
I've included (gensym [label]) as well.  If I find a hygienic macro
package written in Scheme, I'll add it as an optional package.

1.2.4 String Handling

Javascript has immutable strings.  R5RS presumes a mutable strings,
whereas R6RS does not.  It therefore made more sense to implement the
R6RS version of basic string handling.  The differences are the lack
of string-set! and string-fill!, and the addition of string-for-each.

5. TODO

4.2.4
do

4.2.5
delay

6.3.2
list-tail
list-ref
memq
memv
member
assq
assv
assoc

6.3.3
symbol?
symbol->string
string->symbol

6.3.5

6.3.6
vector?
make-vector
vector
vector-length
vector-ref
vector-set!
vector->list
list->vector

6.4
procedure?
apply
map
for-each
force

6.5
eval
scheme-report-environment
null-environment
interaction-environment
